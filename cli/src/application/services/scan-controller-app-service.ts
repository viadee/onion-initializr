import chalk from 'chalk';
import prettier from 'prettier';
import { ScannerAppService } from './scanner-app-service';
import { FileService } from '../../../../lib/domain/services/file-service';
import { FileEntity } from '../../../../lib/domain/entities/file-entity';
import { PathAppService } from '../../../../lib/application/services/path-app-service';

export class ScanControllerAppService {
  constructor(
    private readonly scannerService: ScannerAppService,
    private readonly fileService: FileService,
    private readonly pathService: PathAppService
  ) {}

  async handleScan(): Promise<void> {
    const scanIndex = process.argv.indexOf('--scan');
    if (scanIndex === -1) return;

    const rawScanTarget = process.argv[scanIndex + 1] || process.cwd();
    const customFilename = process.argv[scanIndex + 2]; // optional second param

    const scanTarget = this.pathService.resolve(rawScanTarget);

    console.log(chalk.blueBright.bold('\nScan Activated'));
    console.log(chalk.gray('─────────────────────────────────────────────'));
    console.log(
      chalk.green(
        `Looking for Onion Architecture structure at: ${chalk.white(scanTarget)}\n`
      )
    );
    console.log(
      chalk.cyan(
        'This scan works and produces an accurate config JSON if the following are true:'
      )
    );
    console.log(`     The project was generated by this CLI`);
    console.log(`     Folder names match: Domain, Application, Infrastructure`);
    console.log(`     Entities, services, and repositories are not renamed`);
    console.log(
      `     AppService constructor uses 'private readonly' injection\n`
    );
    console.log(
      'starting scan for Onion Architecture project at: ' + scanTarget
    );
    const scanned = await this.scannerService.scanOnionProject(scanTarget);
    const outputFile = customFilename?.endsWith('.json')
      ? customFilename
      : 'reverse.generated.json';

    const parentDir = this.pathService.dirname(scanTarget);
    const outputPath = this.pathService.isAbsolute(outputFile)
      ? outputFile
      : this.pathService.join(parentDir, outputFile);

    const formatted = prettier.format(JSON.stringify(scanned), {
      parser: 'json',
    });
    const file = new FileEntity(outputPath, await formatted);
    this.fileService.createFile(file);

    console.log(
      chalk.greenBright(
        `Successfully wrote config to: ${chalk.white(outputPath)}`
      )
    );
    console.log(chalk.gray('─────────────────────────────────────────────\n'));

    process.exit(0);
  }
}
